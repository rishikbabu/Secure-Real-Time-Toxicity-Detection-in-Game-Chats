import time
import jwt
from datetime import datetime, timedelta

# Secret key for encoding/decoding JWT tokens (Use environment variable or vault)
SECRET_KEY = "your_jwt_secret_key"

def generate_jwt(user_id):
    """
    Generate a JWT token for user authentication.
    """
    payload = {
        "user_id": user_id,
        "exp": datetime.utcnow() + timedelta(hours=1),  # Token expires in 1 hour
        "iat": datetime.utcnow()
    }
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

def validate_jwt(token):
    """
    Validate JWT token for user authentication.
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        return payload["user_id"]
    except jwt.ExpiredSignatureError:
        print("Token expired")
        return None
    except jwt.InvalidTokenError:
        print("Invalid token")
        return None

def responsible_gaming_session(user_token, session_limit=3600):
    """
    Responsible gaming session with authentication and security logging.
    """
    user_id = validate_jwt(user_token)
    if user_id is None:
        print("Unauthorized access!")
        return
    
    start_time = time.time()
    while True:
        elapsed_time = time.time() - start_time
        if elapsed_time >= session_limit:
            print(f"User {user_id}: You've been playing for too long! Please take a break.")
            break
        time.sleep(300)  # Notify every 5 minutes

# Example of user authentication and session tracking
user_token = generate_jwt("user1234")
responsible_gaming_session(user_token)
